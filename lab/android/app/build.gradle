apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        // the name of the generated asset file containing your JS bundle
        bundleAssetName: "index.android.bundle",

        // the entry file for bundle generation
        entryFile: "demo/index.js",

        // whether to bundle JS and assets in debug mode
        bundleInDebug: false,

        bundleInBeta: true,

        // whether to bundle JS and assets in release mode
        bundleInRelease: true,

        // whether to bundle JS and assets in another build variant (if configured).
        // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
        // The configuration property can be in the following formats
        //         'bundleIn${productFlavor}${buildType}'
        //         'bundleIn${buildType}'
        // bundleInFreeDebug: true,
        // bundleInPaidRelease: true,
        // bundleInBeta: true,

        // the root of your project, i.e. where "package.json" lives
        root: "../../",

        // where to put the JS bundle asset in debug mode
        jsBundleDirDebug: "$buildDir/intermediates/assets/debug",

        // where to put the JS bundle asset in release mode
        jsBundleDirRelease: "$buildDir/intermediates/assets/release",

        // where to put drawable resources / React Native assets, e.g. the ones you use via
        // require('./image.png')), in debug mode
        resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",

        // where to put drawable resources / React Native assets, e.g. the ones you use via
        // require('./image.png')), in release mode
        resourcesDirRelease: "$buildDir/intermediates/res/merged/release",

        // by default the gradle tasks are skipped if none of the JS files or assets change; this means
        // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
        // date; if you have any other folders that you want to ignore for performance reasons (gradle
        // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
        // for example, you might want to remove it from here.
        inputExcludes: ["android/**", "ios/**"]
]

//apply from: "../../node_modules/react-native/react.gradle"
//apply from: "react.gradle"
apply from: "../../local-cli/react.gradle"
apply from: "../../local-cli/lab.gradle"
//apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
//apply from: "test.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion rootProject.ext.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ext.BUILD_TOOLS_VERSION

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "com.lightappbuilder.lab4.test"
//        applicationId "com.backustech.apps.lvnong"  // 用于测试第三方登录
        minSdkVersion rootProject.ext.MIN_SDK_VERSION
        targetSdkVersion rootProject.ext.TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
                UMENG_APPKEY: "578c5eee67e58ee2fd001c9d",
                UMENG_CHANNEL: "DEFAULT",

                JPUSH_APPKEY: "0258ac203a584378d865e09f",
                JPUSH_CHANNEL: "developer-default",

                EASEMOB_APPKEY: "35248620-0#etu",
                //EASEMOB_APPKEY:"easemob-demo#chatdemoui",//这是测试用的

                BAIDU_LBS_API_KEY: "X7NXNS4Gznsf5Of5GR96cIEoW6BeBzTq",

                QQ_APPID: "1105768460",
        ]
        buildConfigField("String", "BUGLY_ID", '"dd7703de66"')
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(project.RELEASE_STORE_FILE)
            storePassword project.RELEASE_STORE_PASSWORD
            keyAlias project.RELEASE_KEY_ALIAS
            keyPassword project.RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
//            debuggable false
        }
        debug {
            signingConfig signingConfigs.release
        }
        beta {
//            debuggable true
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    defaultConfig{
        multiDexEnabled true
    }
}
repositories {
    maven {
        // lab-camera
        url "$rootDir/../node_modules/lab-camera/android/maven"
    }
    maven {
        // lab-image-picker
        url "$rootDir/../node_modules/lab-image-picker/android/maven"
    }
}

configurations.all{
    resolutionStrategy{
        force "com.android.support:appcompat-v7:${rootProject.ext.SUPPORT_VERSION}"
//        force 'com.android.support:support-annotations:23.4.0'
//        force 'com.android.support:support-v4:23.2.1'
//        force 'com.android.support:recyclerview-v7:23.4.0'
//        exclude group: 'com.android.support', module: 'support-core-ui'
//        exclude group: 'com.android.support', module: 'support-compat'
    }
}
dependencies {
    compile project(':react-native-vector-icons')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${rootProject.ext.SUPPORT_VERSION}"
    compile 'com.facebook.react:react-native:+'
    compile 'com.android.support:multidex:1.0.1'
//    compile ('com.github.czy1121:settingscompat:1.1.0'){
//        exclude group:'com.android.support',module:'appcompat-v7'
//    }
    compile 'com.lightappbuilder.lab4:lab-camera:+'
    compile 'com.lightappbuilder.lab4:lab-image-picker:+'

    //compile project(':lablibrary')
    debugCompile project(path: ':lablibrary', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:lab-library:+'
    betaCompile 'com.lightappbuilder.lab4:lab-library:+'

    //compile project(':labpush')
    debugCompile project(path: ':labpush', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labpush:+'
    betaCompile 'com.lightappbuilder.lab4:labpush:+'

    //compile project(':labmap')
    debugCompile project(path: ':labmap', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labmap:+'
    betaCompile 'com.lightappbuilder.lab4:labmap:+'

    debugCompile project(path: ':labpay', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labpay:+'
    betaCompile 'com.lightappbuilder.lab4:labpay:+'

    debugCompile project(path: ':labsocial', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labsocial:+'
    betaCompile 'com.lightappbuilder.lab4:labsocial:+'

    debugCompile project(path: ':labvideo', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labvideo:+'
    betaCompile 'com.lightappbuilder.lab4:labvideo:+'

    debugCompile project(path: ':labim', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:labim:+'
    betaCompile 'com.lightappbuilder.lab4:labim:+'

    debugCompile project(path: ':lablogger', configuration: 'debug')
    releaseCompile 'com.lightappbuilder.lab4:lablogger:+'
    betaCompile 'com.lightappbuilder.lab4:lablogger:+'

    //    compile project(':labaudio')

    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
